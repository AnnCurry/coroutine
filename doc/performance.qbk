[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:performance Performance]

Performance of __boost_coroutine__ was measured on the platforms shown in the
following table. Performance measurements were taken using `rdtsc` and
`boost::chrono::high_resolution_clock`, with overhead corrections, on x86
platforms. In each case, cache warm-up was accounted for, and the one
running thread was pinned to a single CPU. The code was compiled using the
build options, 'variant = release cxxflags = -DBOOST_DISABLE_ASSERTS
optimization = speed' (stack-unwinding disabled).

[table Perfomance of coroutine
    [
        [Platform]
        [switch]
        [construction (protected stack-allocator)]
        [construction (standard stack-allocator)]
        [construction (preallocated stack-allocator)]
    ]
    [
        [i386 [footnote AMD Athlon 64 DualCore 4400+]]
        [55 ns / 105 cycles]
        [ ns /  cycles]
        [ ns /  cycles]
        [ ns /  cycles]
    ]
    [
        [x86_64 [footnote Intel Core2 Q6700]]
        [49 ns / 132 cycles]
        [38029 ns / 111898 cycles]
        [480 ns / 1208 cycles]
        [3528 ns / 13007 cycles]
    ]
]


[endsect]
